# This file is an example config file for corexy (and also h-bot)
# style printers. One may copy and edit this file to configure a new
# corexy printer.
# second source: https://github.com/Klipper3d/klipper/blob/master/config/generic-bigtreetech-skr-2.cfg

#determining stepper motor direction for corexy is challenging cause the only way to test direction is to home the printer as other commands only move motor 1 or 2. To check, drastically reduce homing speed and get ready to hit the emergency stop button on klipper
[printer]
kinematics: corexy 
max_velocity: 300
max_accel: 3000
max_z_velocity: 25
max_z_accel: 30

bed_size_x: 250
bed_size_y: 200

[stepper_x]
step_pin: PE2
dir_pin: !PE1
enable_pin: !PD6
microsteps: 16
rotation_distance: 40 #200(1.8stepper motor) * 16 / 80
endstop_pin: ^!PC1
position_endstop: 0
position_max: bed_size_x
homing_speed: 50

[stepper_y]
step_pin: PD5
dir_pin: !PD4
enable_pin: !PE3
microsteps: 16
rotation_distance: 40
endstop_pin: ^!PC3
position_endstop: 0
position_max: bed_size_y
homing_speed: 50

[stepper_z]
step_pin: PA15
dir_pin: PA8
enable_pin: !PD1
microsteps: 16
rotation_distance: 5
endstop_pin: ^!PC0
position_endstop: 0 #0.15
position_max: 220

[board_pins SMARTORBITER3] 
aliases: ### define here the pins to which the SO board is connected #######
  filament_sensor_pin = PB8,         # SO3 Pin4 signal shall be connected to a digital I/O pin
  filament_unload_pin = PB9,         # SO3 Pin3 signal shall be connected to a digital I/O pin
  RGB_pin = PA9,                     # SO3 Pin5 signal shall be connected to a digital I/O pin
  extruder_temperature_pin = PA3,    # SO3 Pin2 signal shall be connected to a temperature sensing input pin with 4.7K pull up resistor
  hotend_lit_pin = PA10               # SO3 Pin1 signal shall be connected to a digital I/O pin
  # hotend lit & RGB -> TFT
  # extruder temp -> TH1
  # filament_sensor and filament_unload-> i2c
  

[gcode_macro _SENSOR_VARIABLES]         # change here macro configurables, enable disable functions!*************************
variable_filament_load_temp     :230    # temperature to heat up hotend for filament loading, default is 235
variable_filament_unload_temp   :185    # temperature to heat up hotend for filament un-loading, default is 185
variable_filament_load_min_temp :190    # minimum hotend set temperature allowed in filament load macro, default is 190
variable_nozzle_purge_length    :70    # filament extrude amount during load sequence, hotend purge from old filament, default is 100
variable_nozzle_purge_speed     :300    # filament extrude speed in mm/min adjust this value lower if flow is too high and extruder skips during loading, default is 300
variable_temp_restore           :True   # [True] restore previous temperature after filament change
variable_disable_autoload       :False  # disable filament autoload feature by setting this variable True
variable_disable_runout         :False  # disable runout by setting this variable True
variable_disable_autounload     :False  # disable auto unload filament by setting this variable to True
variable_pause_on_unload_button :True   # pauses the printer if the unload button is pressed during printing
variable_disable_runout_unload  :True   # disable auto filament unload after runout detection
variable_pause_timeout          :3600   # printer timeout setting in seconds, avoids disabling of steppers and heaters after klipper default timeout of 600s 
variable_enable_beep            :True   # uses M300 sound feature, set it True to enable																					  
variable_park_position_x        :100    # set your X parking position here for pause macro trigerred by runout
variable_park_position_y        :-5     # set your Y parking position here for pause macro trigerred by runout
variable_park_lift_z            :10     # set your Z lift amount for parking position here, default is 10
variable_park_retraction        :1      # set your retraction amount for parking, default is 1
gcode:

[respond]
default_type: echo

[extruder]
step_pin: PD15
dir_pin: !PD14
enable_pin: !PC7
microsteps: 32
full_steps_per_rotation: 200
rotation_distance: 4.69
nozzle_diameter: 0.4
filament_diameter: 1.750
max_extrude_only_distance: 500
max_extrude_only_velocity: 120
sensor_type: ATC Semitec 104NT-4-R025H42G  
sensor_pin: PA0
pullup_resistor: 4700
min_temp: 0
max_temp: 350
pressure_advance: 0.015
pressure_advance_smooth_time: 0.03
min_extrude_temp: 170
smooth_time: 0.5
max_extrude_cross_section:10
control = pid
pid_Kp=21.558 
pid_Ki=1.482 
pid_Kd=78.418

#[extruder1]
#step_pin: PD11
#dir_pin: PD10
#enable_pin: !PD13
#heater_pin: PB4
#sensor_pin: PA3
#...

[heater_bed]
heater_pin: PD7
sensor_type: NTC 100K beta 3950
sensor_pin: PA1
#control: watermark
min_temp: 0
max_temp: 120

[fan]
pin: PB7

#[heater_fan fan1]
#pin: PB6

#[heater_fan fan2]
#pin: PB5

# Due to BTT implementing a Marlin-specific safety feature,
# "anti-reversal stepper protection", this pin needs pulling
# high to pass power to stepper drivers and most FETs

[output_pin motor_power]
pin: PC13
value: 1

[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32f407xx_3D0025001847393437363439-if00



# TROUBLESHOOTING
# use this command to check without homing: FORCE_MOVE STEPPER=stepper_z DISTANCE=100 VELOCITY=10
[force_move]
enable_force_move: True
#   Set to true to enable FORCE_MOVE and SET_KINEMATIC_POSITION
#   extended G-Code commands. The default is false.

########################################
# EXP1 / EXP2 (display) pins
########################################

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PC5, EXP1_3=PB1, EXP1_5=PE10, EXP1_7=PE12, EXP1_9=<GND>,
    EXP1_2=PB0, EXP1_4=PE9, EXP1_6=PE11, EXP1_8=PE13, EXP1_10=<5V>,
    # EXP2 header
    EXP2_1=PA6, EXP2_3=PE7, EXP2_5=PB2, EXP2_7=PC4,   EXP2_9=<GND>,
    EXP2_2=PA5, EXP2_4=PA4, EXP2_6=PA7, EXP2_8=<RST>, EXP2_10=<NC>

# See the sample-lcd.cfg file for definitions of common LCD displays.

######################################################################
# MKS Mini 12864 LCD
######################################################################

# Make sure that the EXP1 and EXP2 are rotated correctly on the
# display board. The cutouts on the connectors should be towards the
# center of the PCB. See:
#   https://reprap.org/wiki/MKS_MINI_12864#Physical_Interface
# If they are wrong, the connector housing can be pried off carefully
# with a small screwdriver and relocated the correct way.

[display]
lcd_type: uc1701
cs_pin: EXP1_6
a0_pin: EXP1_7
contrast: 40
encoder_pins: ^EXP2_3, ^EXP2_5
click_pin: ^!EXP1_2
# # Some micro-controller boards may require an spi bus to be specified:
# spi_bus: spi
# # Alternatively, some micro-controller boards may work with software spi:
# spi_software_miso_pin: EXP2_1
# spi_software_mosi_pin: EXP2_6
# spi_software_sclk_pin: EXP2_2

[output_pin beeper]
pin: EXP1_1

########################################
# TMC2209 configuration
########################################

[tmc2209 stepper_x]
uart_pin: PE0
run_current: 0.700 #0.58, 0.8 stable
hold_current: 0.700
diag_pin:

[tmc2209 stepper_y]
uart_pin: PD3
run_current: 0.700
hold_current: 0.700
diag_pin:

[tmc2209 stepper_z]
uart_pin: PD0
run_current: 0.700
hold_current: 0.700
diag_pin:

[tmc2209 extruder]
uart_pin: PC6
interpolate: true
run_current: 0.85 #**
sense_resistor: 0.11 #**
stealthchop_threshold: 0

[firmware_retraction]
retract_length: 1.0
retract_speed: 100
unretract_extra_length: 0.0
unretract_speed: 80

# [tmc2209 extruder1]
# uart_pin: PD12
# run_current: 0.600
# diag_pin:

[heater_fan extruder_Fan]
pin: !PB7
tachometer_pin: PC2
tachometer_ppr: 2
tachometer_poll_interval: 0.0005
heater: extruder
cycle_time: 0.0001 #10KHz PWM frequency, do not change this
heater_temp: 85
fan_speed: 0.65 # increase in case experiencing clogging during printing.
hardware_pwm: false
shutdown_speed: 0.0
max_power: 1.0

[neopixel my_neopixel]
pin:PE6
#   The pin connected to the neopixel. This parameter must be
#   provided.
chain_count:32
#   The number of Neopixel chips that are "daisy chained" to the
#   provided pin. The default is 1 (which indicates only a single
#   Neopixel is connected to the pin).
color_order: GRB
#   Set the pixel order required by the LED hardware. Options are GRB,
#   RGB, GRBW, or RGBW. The default is GRB.
#initial_RED: 0.0
#initial_GREEN: 0.0
#initial_BLUE: 0.0
#initial_WHITE: 0.0
#   Sets the initial LED color of the Neopixel. Each value should be
#   between 0.0 and 1.0. The WHITE option is only available on RGBW
#   LEDs. The default for each color is 0.

#################################################################################################################################
########################################### SO3 Features Configuration ##########################################################
#################################################################################################################################

[output_pin hot_lit]
pin: hotend_lit_pin
pwm: False
value: 1

[neopixel SO3RGB]
pin: RGB_pin
chain_count: 1
color_order: GRB
initial_RED: 0.0
initial_GREEN: 1.0
initial_BLUE: 0.0

[thermistor SO3Thermistor]
temperature1: 25
resistance1: 100000
beta: 3950

[temperature_sensor SO3]
sensor_type: SO3Thermistor
sensor_pin: extruder_temperature_pin
pullup_resistor: 4700
min_temp: 0
max_temp: 85

########################################
# Input Shaper configuration
########################################

[mcu rpi]
serial: /tmp/klipper_host_mcu

[adxl345]
cs_pin: rpi:None

[resonance_tester]
accel_chip: adxl345
probe_points:
    100,100,20  # an example

[input_shaper]
shaper_freq_x: 104
shaper_freq_y: 64.8
shaper_type: mzv
damping_ratio_x: 0.1
damping_ratio_y: 0.1



[output_pin probe_enable]
pin: PE5 # The control IO on the SKR 3 is PE5
value: 0 # Probe default retracted
# Probe deploy command
[gcode_macro Probe_Deploy]
gcode:
SET_PIN PIN=probe_enable VALUE=1
# Probe stow command
[gcode_macro Probe_Stow]
gcode:
SET_PIN PIN=probe_enable VALUE=0
[probe]
BIQU MicroProbe V2 User Manual
pin: ^PE4 # The detection IO on the SKR 3 is PC13, V1 should be ^PC13
means high-level triggered, V2 should be ^!PC13 means low -level triggered.
deactivate_on_each_sample: False
x_offset: 0.0 # Actual installed offset of MicroProbe
y_offset: 0.0 # Actual installed offset of MicroProbe
z_offset: 0.0 # Actual installed offset of MicroProbe
speed: 5.0
activate_gcode:
Probe_Deploy
G4 P500 # Allow 500 milliseconds for the probe to deploy
deactivate_gcode:
Probe_Stow

bed_mesh
speed: 50
# The speed (in mm/s) of non-probing moves during the calibration
horizontal_move_z: 5
# The height (in mm) that the head should be commanded to move to
# just prior to starting a probe operation.
mesh_min: 10, 10
# Defines the minimum X, Y coordinate of the mesh for rectangular
# beds. This coordinate is relative to the probe's location. This
# will be the first point probed, nearest to the origin. This
# parameter must be provided for rectangular beds.
mesh_max: bed_size_x, bed_size_y
# Defines the maximum X, Y coordinate of the mesh for rectangular
# beds. Adheres to the same principle as mesh_min, however this will
# be the furthest point probed from the bed's origin. This parameter
# must be provided for rectangular beds.
probe_count: 5, 5
# For rectangular beds, this is a comma separate pair of integer
# values X, Y defining the number of points to probe along each
# axis. A single value is also valid, in which case that value will
# be applied to both axes.



# for fluidd
[display_status]

[virtual_sdcard]
path: ~/gcode_files
#   The path of the local directory on the host machine to look for
#   g-code files. This is a read-only directory (sdcard file writes
#   are not supported). One may point this to OctoPrint's upload
#   directory (generally ~/.octoprint/uploads/ ). This parameter must
#   be provided.


[pause_resume]

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %} 
  
[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}
  
[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE

[gcode_macro LED_ON]
description: Turn on LED
gcode:
  SET_LED LED=my_neopixel RED=1 GREEN=1 BLUE=1

[gcode_macro LED_OFF]
description: Turn off LED
gcode:
  SET_LED LED=my_neopixel RED=0 GREEN=0 BLUE=0

[gcode_macro M105]
rename_existing:            M105.1
gcode:  
   M105.1
   #if the extruder is off
   {% if printer.extruder.target == 0 %}
      #Set the LED to red if the extruder is off but is still hot, otherwise 
      # set the color to green
      {% if printer.extruder.temperature > 60.0 %}
         SET_LED LED=my_neopixel RED=1 GREEN=0 BLUE=0 TRANSMIT=1
      {% else %}
         SET_LED LED=my_neopixel RED=0 GREEN=1 BLUE=0 TRANSMIT=1
      {% endif %}     
   {% else %}
         #if the extruder temp is at target temperature 
         {% if printer.extruder.temperature >= printer.extruder.target - 4.0 %}
            SET_LED LED=my_neopixel RED=1 GREEN=0 BLUE=0 TRANSMIT=1
         #if the extruder is still heating
         {% else %}
            {% set scaler = printer.extruder.temperature|float / printer.extruder.target|float %}
            SET_LED LED=my_neopixel RED={ scaler|float * 1 } GREEN=0 BLUE=0 TRANSMIT=1
         {% endif %}  
   {% endif %}



#################################################################################################################################
############################################## SO3 Runout and autoload macros #######################################################
#################################################################################################################################

#################################################################################################################################
####################################### DO NOT CHANGE ANYTHING BELOW THIS LINE!!! ###############################################
#################################################################################################################################
####################################### UNLESS YOU KNOW WHAT YOU ARE DOING OR YOU ARE BORED AND NEED TO DO SOMETHING OR YOU ARE ALONE AND NEED SOMETHING TO MESS UP YOUR LIFE OR YOU CAN DO IT BETTER THAN ME OR YOU ARE A REAL SMARTASS OR JUST BECAUSE YOU CAN OR YOU RUN OUT OF BEAR OR HAS NOTHING BETTER TO DO OR ANY UNREASONABLE REASON
#################################################################################################################################


#*****************************initial RGN LED set at printer start****************************************************************
[delayed_gcode startup_RGB_SET]
initial_duration: 2
gcode:
  {% if printer["filament_switch_sensor SO3Sensor"].filament_detected==true %}
      SET_LED LED=SO3RGB RED=0.0 GREEN=1.0 BLUE=0.0
  {% else %}
      SET_LED LED=SO3RGB RED=1.0 GREEN=0.0 BLUE=0.0
  {% endif %}


#***********************************filament switch definition***********************************************************

[filament_switch_sensor SO3Sensor]
switch_pin: filament_sensor_pin
pause_on_runout: False # do not change to true, printer is paused in the next sections
runout_gcode: UPDATE_DELAYED_GCODE ID=runout_filter DURATION=0.8 # duration defines the filter time for runout detection
insert_gcode: filament_load_init
event_delay: 1.0
pause_delay: 0.1


#////////////////////////////////////////Filament Unload macros/////////////////////////////////////////////////

[gcode_button filament_unload]
pin: !filament_unload_pin
release_gcode:  # filament unload procedure
  SET_LED LED=SO3RGB RED=0.0 GREEN=0.5 BLUE=0.5
  filament_unload_init
press_gcode: # do not add any macro call here

[delayed_gcode runout_filter]
gcode: #checking if filament runout is still present after defined delay time, default 0.5s
  {% if printer["filament_switch_sensor SO3Sensor"].filament_detected==false %}
      runout_init
  {% else %}
      M118 SO3: Runout sensor intermitent contact detected!
  {% endif %}


[gcode_macro runout_init]
gcode:
  {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}
  SET_LED LED=SO3RGB RED=1.0 GREEN=0.0 BLUE=0.0
  {% if (printer.print_stats.state == "printing") %}
    {% if(sensor.disable_runout|lower == 'false') %}
      filament_change_state1
    {% else %}
    M118 SO3: Filament runout is disabled in the sensor config file!
    {% endif %}
  {% endif %}
  UPDATE_DELAYED_GCODE ID=clear_loadbusy DURATION=2
  UPDATE_DELAYED_GCODE ID=clear_unloadbusy DURATION=2
  SET_GCODE_VARIABLE MACRO=filament_unload VARIABLE=filamentpresent VALUE=0

[gcode_macro filament_change_state1]
variable_changebusy: 0
variable_temp_target: 0
gcode:
  {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}
  {% if changebusy == 0 %}
    PAUSE # call printer pause macro    
    M118 SO3: Printer paused due to filament runout!
    {% if(sensor.disable_runout_unload|lower == 'false') %}
        SET_GCODE_VARIABLE MACRO=filament_change_state1 VARIABLE=changebusy VALUE=1
        filament_change_state2 # when enabled automatically unloads filament after runout detection. It is not recomanded to enable for large prints, filamen may jam innside the extuder        
    {% endif %}
  {% else %}
  {% endif %}

[gcode_macro filament_change_state2]
gcode:
  {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}
  SET_GCODE_VARIABLE MACRO=filament_load VARIABLE=loadbusy VALUE=1
  {% if (sensor.enable_beep|lower == 'true') %}
    M300 # beep sound
  {% endif %}
  M118 SO3: Unloading filament...
  M83
  G92 E0
  {% if (printer.extruder.can_extrude|lower != 'true')%} # checking for minimum extrusion temperature
        # check if temperature is over the minimum extrusion temp. min_extrude_temp must be defined in the extruder config (to about 185)
      M118 SO3: Hotend heating!
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET={sensor.filament_unload_temp} # restore user temp if it was set before loading
      TEMPERATURE_WAIT SENSOR=extruder MINIMUM={sensor.filament_unload_temp-1} #wait for reaching filament unload temp
      {% endif %}
  {% if(printer.extruder.target == 0) %} # checking for set temperature if is zero than set to 200 / hotend hot but cooling due to set target temp 0
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET={sensor.filament_unload_temp} # restore user temp if it was set before loading
      TEMPERATURE_WAIT SENSOR=extruder MINIMUM={sensor.filament_unload_temp-1} #wait for reaching filament unload temp
  {% endif %}
 # filament_unload_procedure  # call macro of filamnet unload procedure
  M400
  M118 SO3: Load new filament! Wait until is loaded, then resume printing.
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0 # switch off heater
  UPDATE_DELAYED_GCODE ID=clear_loadbusy DURATION=2.5 # timing must be set to clear delay plus 0.5s. is due to wait to remove filament before starting load even in case there is a blob at the tip of the extracted filament which woudl trigger the sensor twice

#############################################END filament auto load macro section END***********************************************************
																																				

[gcode_macro filament_load_init]
gcode:
  {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}
  SET_LED LED=SO3RGB RED=0.0 GREEN=1.0 BLUE=0.0
  {% if (printer.print_stats.state != "printing") %}
    {% if(sensor.disable_autoload|lower == 'false') %}
      filament_load
    {% else %}
    M118 SO3: Filament auto-load is disabled in the sensor config file!
    UPDATE_DELAYED_GCODE ID=unload_RGB_update DURATION=3
    {% endif %}
  {% else %}
     M118 SO3: Printing! Can't load filament right now!
  {% endif %}
  SET_GCODE_VARIABLE MACRO=filament_unload VARIABLE=filamentpresent VALUE=1
  UPDATE_DELAYED_GCODE ID=clear_changebusy DURATION=2


[gcode_macro filament_load]
variable_loadbusy: 0
variable_USER_TEMP: 0
variable_LOAD_TEMP: 0
gcode:
    SET_LED LED=SO3RGB RED=0.7 GREEN=0.5 BLUE=0.0
    {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}
    {% if loadbusy == 0 %} # requires [virtual_sdcard]
      SET_GCODE_VARIABLE MACRO=filament_load VARIABLE=loadbusy VALUE=1
      SET_GCODE_VARIABLE MACRO=filament_unload VARIABLE=unloadbusy VALUE=1
      {% set USER_TEMP = printer.extruder.target %} # save user set temperature before loading
      {% set LOAD_TEMP = 0 %}
        {% if (printer.extruder.can_extrude|lower != 'true') or (printer.extruder.target < sensor.filament_load_min_temp) %} # checking for minimum extrusion temperature
        # check if temperature is over the minimum extrusion temp. min_extrude_temp must be defined in the extruder config (to about 185)
          SET_HEATER_TEMPERATURE HEATER=extruder TARGET={sensor.filament_load_temp} # set user defined load temperature
          {% set LOAD_TEMP = sensor.filament_load_temp %} # save user set temperature before loading
         M118 SO3: Hotend heating!
      {% endif %}     
    {% if (sensor.enable_beep|lower == 'true') %} 
      M300 # beep sound
    {% endif %}
    M118 SO3: Loading filament...
    M82           #set extruder to absolute mode
    G92 E0
    G4 P1500        # wait for 1.5 seconds
    FORCE_MOVE STEPPER=extruder DISTANCE=15 VELOCITY=10 ACCEL=1000  # load filament inside the gears force move needs to be enabled
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={LOAD_TEMP-1} # wait for reaching set temperature
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={USER_TEMP-1} # wait for reaching set temperature
    G1 E{sensor.nozzle_purge_length} F{sensor.nozzle_purge_speed} # extrude preconfigured purge length
    M400 # wait to complete nozzle purge
    {% if ((printer.print_stats.state == "printing")  or (printer.print_stats.state == "paused"))%} #if the printer is not printing or paused the nozzle temp will not be restored but set to 0.
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET={USER_TEMP} # restore user temp if it was set before loading      
    {% else %}
      M104 S0 T0
    {% endif %}
    {% if printer["filament_switch_sensor SO3Sensor"].filament_detected==true %}
      M118 SO3: Filament load complete!
      SET_LED LED=SO3RGB RED=0.0 GREEN=1.0 BLUE=0.0
      {% if (sensor.enable_beep|lower == 'true') %}
        M300 # beep sound
      {% endif %}
    {% else %}
      M118 SO3: Filament load failed!  
      SET_LED LED=SO3RGB RED=1.0 GREEN=0.0 BLUE=0.0
    {% endif %}      
    UPDATE_DELAYED_GCODE ID=clear_unloadbusy DURATION=2
    UPDATE_DELAYED_GCODE ID=clear_loadbusy DURATION=2
    {% else %}
      M118 SO3: Filament already loaded!
	  SET_LED LED=SO3RGB RED=0.0 GREEN=1.0 BLUE=0.0
    {% endif %}  
#############################################END filament auto load macro section END***********************************************************

#############################################filament auto unload macro section*****************************************************************
[gcode_macro filament_unload_procedure]
gcode:
    G92 E0
    G0 E-9 F3600 # retract fast 9mm
    G4 P2000 # Wait 2 sec for filament cooling
    G0 E9 F3000 # extruder 9mm to crush filament end
    G0 E-5 F3000 #extract filament to cold end fast
    G0 E-10 F300 #extract filament to cold end slow
    G4 P5000 # Wait 5 sec for filament cooling
    G0 E-25 F3000 	#extract filament completely


[gcode_macro filament_unload_init]
gcode:
  {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}
  {% if (printer.print_stats.state != "printing") %}
    {% if(sensor.disable_autounload|lower == 'false') %}
      filament_unload
    {% else %}
      M118 SO3: Filament auto-unload is disabled in the sensor config file!
    {% endif %}
  {% else %}
     {% if(sensor.pause_on_unload_button|lower == 'true') %}
      PAUSE
      M118 SO3: Printer paused by SO3 unload button!
      SET_LED LED=SO3RGB RED=0.0 GREEN=1.0 BLUE=0.0
    {% else %}
      M118 SO3: Printing! Can't unload filament right now!
    {% endif %}
  {% endif %}

[gcode_macro filament_unload]
variable_unloadbusy: 0
variable_filamentpresent: 0
gcode:
    {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}
    {% if unloadbusy == 0 %} # requires [virtual_sdcard]
      SET_GCODE_VARIABLE MACRO=filament_unload VARIABLE=unloadbusy VALUE=1
      SET_GCODE_VARIABLE MACRO=filament_load VARIABLE=loadbusy VALUE=1
												   
      {% if (sensor.enable_beep|lower == 'true') %}
        M300 # beep sound
      {% endif %}
      M118 SO3: Unloading filament...
      M83
      G92 E0
      {% if ((printer.extruder.can_extrude|lower != 'true') or (printer.extruder.target == 0))%} # checking for minimum extrusion temperature
        # check if temperature is over the minimum extrusion temp. min_extrude_temp must be defined in the extruder config (to about 185)
        M118 SO3: Hotend heating!
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET={sensor.filament_unload_temp} # restore user temp if it was set before loading
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={sensor.filament_unload_temp-1} # wait for reaching configured unload temperature
      {% endif %}
      filament_unload_procedure # call macro of filamnet unload procedure
      #M104 S0 T0					   
      M400 # wait to complete unload
      M118 SO3: Filament unload complete!
      UPDATE_DELAYED_GCODE ID=clear_unloadbusy DURATION=2
      UPDATE_DELAYED_GCODE ID=clear_loadbusy DURATION=2
      UPDATE_DELAYED_GCODE ID=unload_RGB_update DURATION=2
      SET_LED LED=SO3RGB RED=0.0 GREEN=0.0 BLUE=1.0
      {% if (sensor.enable_beep|lower == 'true') %}
        M300 # beep sound
      {% endif %}
    {% else %}
      M118 SO3: Nothing to unload!
	  SET_LED LED=SO3RGB RED=1.0 GREEN=0.0 BLUE=0.0
    {% endif %}

#############################################END filament auto unload macro section END***********************************************************

[delayed_gcode unload_RGB_update]
gcode: # change RGB led to RED after filament is phisicaly removed after unload
  {% if printer["filament_switch_sensor SO3Sensor"].filament_detected==true %}
      UPDATE_DELAYED_GCODE ID=unload_RGB_update DURATION=2
  {% else %}
      SET_LED LED=SO3RGB RED=1.0 GREEN=0.0 BLUE=0.0
  {% endif %}


[delayed_gcode clear_unloadbusy]
gcode:
  SET_GCODE_VARIABLE MACRO=filament_unload VARIABLE=unloadbusy VALUE=0
  #M118 SO3: Clear Unload busy!

[delayed_gcode clear_changebusy]
gcode:
  SET_GCODE_VARIABLE MACRO=filament_change_state1 VARIABLE=changebusy VALUE=0
  #M118 SO3: Clear Load busy!

[delayed_gcode set_loadbusy]
gcode:
  SET_GCODE_VARIABLE MACRO=filament_load VARIABLE=loadbusy VALUE=1
  #M118 SO3: Set Load busy!

[delayed_gcode clear_loadbusy]
gcode:
  SET_GCODE_VARIABLE MACRO=filament_load VARIABLE=loadbusy VALUE=0
  #M118 SO3: Clear Load busy!


#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 28.913
#*# pid_ki = 1.506
#*# pid_kd = 138.782
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 54.462
#*# pid_ki = 1.187
#*# pid_kd = 624.952
